@startuml
class Identite {
    - nip: String
    - nom: String
    - prenom: String
    + Identite(nip: String, n: String, p: String)
    + getNip(): String
    + getNom(): String
    + getPrenom(): String
}

class Etudiant{
    - notes: Map<Matiere, List<Float>
    + Etudiant(id: Identite, f: Formation)
    + getIdentite(): Identite
    + getFormation(): Formation
    + getNotes(): Map<Matiere, List<Float>
    + ajouterNoteMatiere(m: Matiere, note: float): void
    + calculerMoyenneMatiere(m: Matiere): float
    + calculerMoyenneGenerale(): float
    + equals(o: Object): boolean
}

class Formation {
  - identifiant: String
  + Formation(id: String)
  + ajouterMatiere(matiere: Matiere): boolean
  + supprimerMatiere(matiere: Matiere): boolean
  + getCoefficient(matiere: Matiere): float
  + getIdentifiant(): String
  + setIdentifiant(identifiant: String): void
  + getMatieres(): Set<Matiere>
  + setMatieres(matieres: Set<Matiere>): void
}

class Matiere {
    - nom: String
    - coefficient: float
    + Matiere(n: String, coef: float)
    + getNom(): String
    + setNom(nom: String): void
    + getCoefficient(): float
    + setCoefficient(coefficient: float): void
}

class Groupe {
  + Groupe(f: Formation)
  + Groupe(f: Formation, etu: ArrayList<Etudiant>)
  + ajouterEtudiant(etu: Etudiant): boolean
  + supprimerEtudiant(etu: Etudiant): boolean
  + getFormation(): Formation
  + getEtudiants(): List<Etudiant>
  + calculerMoyenneParMatiere(m: Matiere): float
  + calculerMoyenneGenerale(): float
  + triAlpha(): void
  + triAntiAlpha(): void
  + triParMerite(): void
  + toString(): String
}


Identite"1" <-- "1"Etudiant : identite
Formation"1" <-- "1"Etudiant : formation
Matiere"0.*" <--"1" Formation : Set<Matiere> matieres
Etudiant"0.*" <-- "1" Groupe : ArrayList<Etudiant> etudiants
Formation"1" <-- "1" Groupe : formation
@enduml